(ns user)
(require '[thornydev.go-lightly.examples.whispers.chinese-whispers :as w])
(time (w/whispers-main 1000))
(time (w/whispers-main 10000))
(time (w/whispers-main 100000))
(require '[thornydev.go-lightly.examples.whispers.chinese-whispers :as w])
(time (w/whispers-main 10000))
(require '[thornydev.go-lightly.examples.whispers.chinese-whispers :as w])
(time (w/whispers-main 100000))
(ns user)
(require '[thornydev.go-lightly.examples.whispers.chinese-whispers :as w])
(time (w/whispers-main 20000))
(go/stop)
(time (w/whispers-main 30000))
(time (w/whispers-main 40000))
(ns user0
)
(ns user)
(require '[thornydev.go-lightly.examples.whispers.chinese-whispers :as w])
(time (w/whispers-main 20000))
(ns user)
(require '[thornydev.go-lightly.examples.whispers.chinese-whispers :as w])
(time (w/whispers-main 1000))
(time (w/whispers-main 12000))
(ns user)
(require '[thornydev.go-lightly.examples.whispers.chinese-whispers :as w])
(time (w/whispers-as-you-go 10000))
(time (w/whispers-as-you-go 50000))
(time (w/whispers-as-you-go 100000))
(time (w/whispers-main 10000))
(time (w/whispers-as-you-go 10000))
(time (w/whispers-as-you-go 100000))
(/ 9276 0.25)
(doc go/put)
(doc put)
(require '[thornydev.go-lightly.core :as go])
(doc go/put)
(doc go/take)
(doc go/peek)
(doc go/size)
(doc go/close)
(doc go/closed?)
(doc go/prefer)
(require '[thornydev.go-lightly.core :as go])
(require 'thornydev.go-lightly.core-test)
(dir thornydev.go-lightly.core)
(def ch (go/preferred-channel))
(require '[thornydev.go-lightly.core :as go])
(def ch (go/preferred-channel))
ch
(ns user)
(require '[thornydev.go-lightly.core :as go])
(def ch (go/preferred-channel))
ch
(preferred? ch)
(go/preferred? ch)
ch
(size ch)
(go/size ch)
(go/go (go/put ch 42))
ch
(go/size ch)
(def tch (timeout-channel 2000))
(def tch (go/timeout-channel 2300))
(go/size tch)
tch
(go/size tch)
(def tch (go/timeout-channel 6300))
tch
(go/size tch)
tch
(go/size tch)
(def tch (go/timeout-channel 9300))
(go/put tch :foo)
(def tch (go/timeout-channel 9300))
(go/take tch)
t
tch
(go/size tch)
(go/peek tch)
(doc go/close!)
(def ch1 (go/channel))  (def bch2 (go/channel 10))  (def bch3 (go/channel 10))
(prefer! bch2)
(go/prefer! bch2)
(go/go (go/put ch1 :ch1-a))
(dotimes [i 3] (go/put bch2 (str ":bc2-" i)) (go/put bch3 (str ":bc3-" i)))
[ch1 bch2 bch3]
(pprint [ch1 bch2 bch3])
(dotimes [i 7] (println (go/select ch1 bch2 bch3)))
(doc go/prefer!)
